import java.io.*;
import java.time.LocalDateTime;
import java.util.*;

public class Airplane implements Serializable {
    private List<Seat> seats;
    private LocalDateTime flightDate;

    public Airplane(LocalDateTime flightDate) {
        this.flightDate = flightDate;
        this.seats = new ArrayList<>();
        initSeats();
    }

    private void initSeats() {
        // –ë–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å
        for (int row = 1; row <= 5; row++)
            for (char col = 'A'; col <= 'D'; col++)
                seats.add(new Seat(row + String.valueOf(col), "Business"));

        // –≠–∫–æ–Ω–æ–º-–∫–ª–∞—Å—Å
        for (int row = 6; row <= 21; row++)
            for (char col = 'A'; col <= 'F'; col++)
                seats.add(new Seat(row + String.valueOf(col), "Economy"));
    }

    private void checkExpiredBookings() {
        for (Seat seat : seats) {
            if (seat.isExpired()) {
                seat.cancel();
                System.out.println("‚è∞ –ë—Ä–æ–Ω—å " + seat.getSeatNumber() + " –∏—Å—Ç–µ–∫–ª–∞ (—Å–Ω—è—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏).");
            }
        }
    }

    public void showSeats() {
        checkExpiredBookings();
        System.out.println("\n–î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞: " + flightDate);
        for (Seat seat : seats) {
            System.out.println(seat);
        }
    }

    public Seat findSeat(String number) {
        for (Seat seat : seats) {
            if (seat.getSeatNumber().equalsIgnoreCase(number)) {
                return seat;
            }
        }
        return null;
    }

    public void bookSeat(String number, String name) {
        Seat seat = findSeat(number);
        if (seat == null) {
            System.out.println("‚ùå –¢–∞–∫–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
            return;
        }
        if (!seat.isFree()) {
            System.out.println("‚ùå –ú–µ—Å—Ç–æ —É–∂–µ –∑–∞–Ω—è—Ç–æ!");
            return;
        }
        seat.book(new Passenger(name));
        System.out.println("‚úÖ –ú–µ—Å—Ç–æ " + number + " –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ 24 –º–∏–Ω—É—Ç—ã!");
    }

    public void payForSeat(String number) {
        Seat seat = findSeat(number);
        if (seat == null) {
            System.out.println("‚ùå –ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!");
            return;
        }
        if (seat.getStatus() == BookingStatus.BOOKED) {
            seat.pay();
            System.out.println("üí≥ –ú–µ—Å—Ç–æ " + number + " –æ–ø–ª–∞—á–µ–Ω–æ!");
        } else if (seat.getStatus() == BookingStatus.PAID) {
            System.out.println("‚ùó –≠—Ç–æ –º–µ—Å—Ç–æ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–æ.");
        } else {
            System.out.println("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ.");
        }
    }

    public void cancelBooking(String number) {
        Seat seat = findSeat(number);
        if (seat == null) {
            System.out.println("‚ùå –ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!");
            return;
        }
        if (seat.getStatus() == BookingStatus.FREE) {
            System.out.println("‚ùå –ú–µ—Å—Ç–æ –Ω–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ.");
            return;
        }
        seat.cancel();
        System.out.println("‚úÖ –ë—Ä–æ–Ω—å/–æ–ø–ª–∞—Ç–∞ –Ω–∞ –º–µ—Å—Ç–æ " + number + " –æ—Ç–º–µ–Ω–µ–Ω–∞.");
    }

    public void showInfo(String number) {
        Seat seat = findSeat(number);
        if (seat == null) {
            System.out.println("‚ùå –ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!");
            return;
        }
        System.out.println(seat);
    }

    // --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
    public void saveToFile(String filename) {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(filename))) {
            oos.writeObject(this);
        } catch (IOException e) {
            System.out.println("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: " + e.getMessage());
        }
    }

    public static Airplane loadFromFile(String filename) {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(filename))) {
            return (Airplane) ois.readObject();
        } catch (Exception e) {
            System.out.println("–°–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤—ã–π —Ä–µ–π—Å...");
            // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞
            return new Airplane(LocalDateTime.now().plusHours(3));
        }
    }
}
